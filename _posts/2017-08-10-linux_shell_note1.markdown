---
layout: post
title:  "Linux Shell的 & 、&& 、 ||笔记"
date:   2017-08-10 11:00:00 +0800
tag: shell
category: 2017年8月
description: "Linux Shell的 & 、&& 、 ||笔记"
keywords: linux,shell,&,&&,||
type: coding
user: kevis
---

### & 放在启动参数后面表示设置此进程为后台进程(实现并行)

```
默认情况下，进程是前台进程，这时就把Shell给占据了，我们无法进行其他操作，对于那些没有交互的进程，很多时候，我们希望将其在后台启动，可以在启动参数的时候加一个'&'实现这个目的。
```

### &&、||  前面命令的返回值来控制其后面命令的执行

```
shell 在执行某个命令的时候，会返回一个返回值，该返回值保存在 shell 变量 $? 中。当 $? == 0 时，表示执行成功；当 $? == 1 时（我认为是非0的数，返回值在0-255间），表示执行失败。有时候，下一条命令依赖前一条命令是否执行成功。如：在成功地执行一条命令之后再执行另一条命令，或者在一条命令执行失败后再执行另一条命令等。shell 提供了 && 和 || 来实现命令执行控制的功能，shell 将根据 && 或 || 前面命令的返回值来控制其后面命令的执行。
```

语法格式如下：

```
command1 && command2 [&& command3 ...]
```
 
```
1.命令之间使用 && 连接，实现 逻辑与的功能。 
2.只有在 && 左边的命令返回真（命令返回值 $? == 0），&& 右边的命令才会被执行。 
3.只要有一个命令返回假（命令返回值 $? == 1），后面的命令就不会被执行。 --短路的功能
```

```
command1 || command2 [|| command3 ...] 
```

```
命令之间使用 || 连接，实现 逻辑或的功能。 
只有在 || 左边的命令返回假（命令返回值 $? == 1），|| 右边的命令才会被执行。这和 c 语言中的逻辑或语法功能相同，即实现短路逻辑或操作。 
只要有一个命令返回真（命令返回值 $? == 0），后面的命令就不会被执行。 --直到返回真的地方停止执行。
```